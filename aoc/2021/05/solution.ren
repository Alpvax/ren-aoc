import "ren/array" as Array exposing { #continue, #stop }
import "ren/console" as Console
import "ren/file" as File
import "ren/function" as Function
import "ren/logic" as Logic
import "ren/maybe" as Maybe exposing { #just, #nothing }
import "ren/string" as String
import "ren/result" as Result exposing { #ok, #err}

pub fun main = [ year, day, part, test ] => {
    let input = if Logic.not test
        then File.open "./input.txt" { sync: true } |> Result.map (String.split "\\n")
        else #ok [
            "0,9 -> 5,9",
            "8,0 -> 0,8",
            "9,4 -> 3,4",
            "2,2 -> 2,1",
            "7,0 -> 7,4",
            "6,4 -> 2,0",
            "0,9 -> 2,9",
            "3,4 -> 1,4",
            "0,0 -> 8,8",
            "5,5 -> 8,2"
        ]

    ret when input
        is #ok lines => {
            let map = parseInput lines
            ret when String.toNumber part
                is #just 1 => solvePartOne map
                is #just 2 => solvePartTwo map
                else => Console.warn `Unknown part: "${part}".`
        }
        is #err e => Console.error e
}

let parseInput = fun lines => "UNIMPLEMENTED"

let solvePartOne = fun map => "UNIMPLEMENTED"

let solvePartTwo = fun map => "UNIMPLEMENTED"